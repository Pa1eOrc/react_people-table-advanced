{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink.tsx","utils/searchHelper.ts","components/PeopleTable.tsx","components/PeopleFilters.tsx","components/PeoplePage.tsx","components/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","renderPersonName","person","searchParams","name","pathname","slug","search","toString","sex","PersonLink","people","born","died","motherName","fatherName","useSearchParams","useParams","selectedPerson","find","p","personMother","mother","personFather","father","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","interactiveElements","PeopleTable","sortedPeople","sort","get","order","createSortLinkParams","element","newSort","toLowerCase","newOrder","map","iconClasses","PeopleFilters","availableCenturies","setSearchParams","query","centuries","getAll","type","placeholder","onChange","event","setSearchWidth","target","century","includes","filter","ch","length","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","setSortedPeople","useEffect","getPeople","catch","error","console","finally","updatedPeople","personA","personB","localeCompare","some","field","Math","ceil","sortPeople","useMemo","year","index","arr","indexOf","a","b","NotFoundPage","Root","path","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5498e860.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = (\n  { isActive }: { isActive: boolean },\n) => classNames('navbar-item',\n  { 'has-background-grey-lighter': isActive });\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import classNames from 'classnames';\n\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  people: Person[],\n};\n\nconst renderPersonName = (\n  person: Person | undefined,\n  searchParams: URLSearchParams,\n  name?: string | null,\n) => {\n  let context;\n\n  if (person) {\n    context = (\n      <Link\n        to={{\n          pathname: `/people/${person.slug}`,\n          search: searchParams.toString(),\n        }}\n        className={classNames({ 'has-text-danger': person.sex === 'f' })}\n      >\n        {person.name}\n      </Link>\n    );\n  } else if (!person && name) {\n    context = name;\n  } else {\n    context = '-';\n  }\n\n  return context;\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  person,\n  people,\n}) => {\n  const {\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n  } = person;\n  const [searchParams] = useSearchParams();\n  const { slug } = useParams();\n  const selectedPerson = people.find(p => p.slug === slug);\n\n  const personMother = people.find(\n    mother => mother.name === motherName,\n  );\n\n  const personFather = people.find(\n    father => father.name === fatherName,\n  );\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames(\n        { 'has-background-warning': selectedPerson?.slug === person.slug },\n      )}\n    >\n      <td>{renderPersonName(person, searchParams)}</td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>{renderPersonName(personMother, searchParams, motherName)}</td>\n      <td>{renderPersonName(personFather, searchParams, fatherName)}</td>\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import classNames from 'classnames';\n\nimport { Link, useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\ntype Props = {\n  sortedPeople: Person[],\n  people: Person[],\n};\n\nconst interactiveElements = ['Name', 'Sex', 'Born', 'Died'];\n\nexport const PeopleTable: React.FC<Props> = ({ sortedPeople, people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const createSortLinkParams = (element: string) => {\n    let newSort = element.toLowerCase() || null;\n    let newOrder: string | null = null;\n\n    if (sort === newSort) {\n      newOrder = 'desc';\n      if (order === 'desc') {\n        newSort = null;\n        newOrder = null;\n      }\n    }\n\n    return {\n      search: getSearchWith(searchParams, {\n        sort: newSort,\n        order: newOrder,\n      }),\n    };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {interactiveElements.map(element => {\n            const iconClasses = classNames('fas', {\n              'fa-sort-up': element.toLowerCase() === sort && !order,\n              'fa-sort-down': element.toLowerCase() === sort && order,\n              'fa-sort': element.toLowerCase() !== sort,\n            });\n\n            return (\n              <th key={element}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {element}\n                  <Link to={createSortLinkParams(element)}>\n                    <span className=\"icon\">\n                      <i className={iconClasses} />\n                    </span>\n                  </Link>\n                </span>\n              </th>\n            );\n          })}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {sortedPeople.map(person => {\n          return (\n            <PersonLink\n              key={person.name}\n              person={person}\n              people={people}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import classNames from 'classnames';\n\nimport { Link, useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\n\ntype Props = {\n  availableCenturies: number[]\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  availableCenturies,\n}) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  function setSearchWidth(paramsToUpdate: SearchParams) {\n    const search = getSearchWith(searchParams, paramsToUpdate);\n\n    setSearchParams(search);\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const updatedParams = { query: event.target.value || null };\n\n    setSearchWidth(updatedParams);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filter</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <Link\n          className={classNames({ 'is-active': sex === '' })}\n          to={{\n            search: getSearchWith(searchParams, { sex: null }),\n          }}\n        >\n          All\n        </Link>\n        <Link\n          className={classNames({ 'is-active': sex === 'm' })}\n          to={{\n            search: getSearchWith(searchParams, { sex: 'm' }),\n          }}\n        >\n          Male\n        </Link>\n        <Link\n          className={classNames({ 'is-active': sex === 'f' })}\n          to={{\n            search: getSearchWith(searchParams, { sex: 'f' }),\n          }}\n        >\n          Female\n        </Link>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQueryChange}\n            value={query}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {availableCenturies.map(century => (\n              <Link\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button mr-1',\n                  { 'is-info': centuries.includes(century.toString()) },\n                )}\n                to={{\n                  search: getSearchWith(searchParams, {\n                    centuries: centuries.includes(century.toString())\n                      ? centuries.filter(ch => ch !== century.toString())\n                      : [...centuries, century.toString()],\n                  }),\n                }}\n              >\n                {century}\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                { 'is-outlined': centuries.length > 0 },\n              )}\n              to={{\n                search: getSearchWith(searchParams, { centuries: null }),\n              }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{\n            search: getSearchWith(searchParams, {\n              centuries: null, query: null, sex: null,\n            }),\n          }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Loader } from './Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { PeopleTable } from './PeopleTable';\nimport { PeopleFilters } from './PeopleFilters';\n\nfunction sortPeople(\n  people: Person[],\n  query: string,\n  sex: string,\n  centuries: string[],\n  sort: string,\n  order: string,\n) {\n  let updatedPeople = [...people];\n\n  updatedPeople.sort((personA: Person, personB: Person) => {\n    if (sort === 'name' || sort === 'sex') {\n      return order === 'desc'\n        ? personB[sort].localeCompare(personA[sort])\n        : personA[sort].localeCompare(personB[sort]);\n    }\n\n    if (sort === 'born' || sort === 'died') {\n      return order === 'desc'\n        ? personB[sort] - personA[sort]\n        : personA[sort] - personB[sort];\n    }\n\n    return 0;\n  });\n\n  if (sex === 'm' || sex === 'f') {\n    updatedPeople = updatedPeople.filter((person) => person.sex === sex);\n  }\n\n  if (query) {\n    updatedPeople = updatedPeople.filter(({ name, fatherName, motherName }) => [\n      name, fatherName, motherName].some(field => field\n        && field.toLowerCase().includes(query.toLowerCase())));\n  }\n\n  if (centuries.length > 0) {\n    updatedPeople = updatedPeople.filter(\n      person => centuries.includes(Math.ceil(person.born / 100).toString()),\n    );\n  }\n\n  return updatedPeople;\n}\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [sortedPeople, setSortedPeople] = useState<Person[]>(people);\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(setPeople)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error('Something went wrong', error);\n        setIsError(true);\n      }).finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    setSortedPeople(\n      sortPeople(people, query, sex, centuries, sort, order),\n    );\n  }, [people, searchParams]);\n\n  const availableCenturies = useMemo(() => {\n    return people\n      .map(person => Math.ceil(person.born / 100))\n      .filter((year, index, arr) => arr.indexOf(year) === index)\n      .sort((a, b) => a - b);\n  }, [people]);\n\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <Loader />\n      );\n    }\n\n    if (!isLoading && isError) {\n      return (\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          Something went wrong\n        </p>\n      );\n    }\n\n    if (!isLoading && people.length === 0) {\n      return (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      );\n    }\n\n    return (\n      <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n        <div className=\"column is-7-tablet is-narrow-desktop\">\n          <PeopleFilters\n            availableCenturies={availableCenturies}\n          />\n        </div>\n\n        <div className=\"column\">\n          <div className=\"box table-container\">\n            {sortedPeople.length > 0 ? (\n              <PeopleTable\n                sortedPeople={sortedPeople}\n                people={people}\n              />\n            ) : (\n              <p>There are no people matching the current search criteria</p>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        {renderContent()}\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route\n            path=\"home\"\n            element={<Navigate to=\"/\" replace />}\n          />\n          <Route\n            path=\"*\"\n            element={<NotFoundPage />}\n          />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}